// modules/ia_handler.js
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { GoogleAuth } = require('google-auth-library');
const chalk = require('chalk');
const { db } = require('./firestore_handler'); // Importamos db directamente

const auth = new GoogleAuth({
    keyFilename: './firebase-credentials.json',
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY, auth);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

/**
 * Construye din√°micamente la base de conocimiento a partir de las nuevas colecciones en Firestore.
 * @returns {Promise<string>} Un string formateado con toda la informaci√≥n para la IA.
 */
async function buildKnowledgeBase() {
    let knowledgeBase = '';

    // 1. Obtener Configuraciones Generales (Estos son documentos dentro de 'knowledge')
    const configSnap = await db.collection('knowledge').doc('configuracionGeneral').get();
    if (configSnap.exists) {
        const configData = configSnap.data();
        knowledgeBase += `Descripci√≥n General: ${configData.descripcionGeneral || 'No disponible.'}\n`;
        knowledgeBase += `Costo de Instalaci√≥n Est√°ndar: $${(configData.costoInstalacion || 0).toLocaleString('es-AR')}\n`;
        knowledgeBase += `Informaci√≥n Adicional: ${configData.infoAdicional || ''}\n\n`;
    }

    // 2. Obtener Planes de Internet (CORRECCI√ìN: Se llama desde la ra√≠z)
    const planesSnap = await db.collection('planes').orderBy('precioMensual').get();
    if (!planesSnap.empty) {
        knowledgeBase += "Planes de Internet Disponibles:\n";
        planesSnap.forEach(doc => {
            const plan = doc.data();
            knowledgeBase += `- Nombre: ${plan.nombre}, Velocidad: ${plan.velocidadBajada} Mbps, Precio: $${(plan.precioMensual || 0).toLocaleString('es-AR')}, Ideal para: ${plan.idealPara}\n`;
        });
        knowledgeBase += "\n";
    }

    // 3. Obtener Promociones Activas (CORRECCI√ìN: Se llama desde la ra√≠z)
    const now = new Date();
    const today = now.getDay(); // 0=Domingo, 1=Lunes, ...
    const promosQuery = db.collection('promociones').where('activo', '==', true);
    const promosSnap = await promosQuery.get();
    
    if (!promosSnap.empty) {
        const activePromos = [];
        promosSnap.forEach(doc => {
            const promo = doc.data();
            let isValid = true;

            if (promo.fechaInicio && promo.fechaInicio.toDate() > now) isValid = false;
            if (promo.fechaFin && promo.fechaFin.toDate() < now) isValid = false;
            if (promo.diasDeLaSemana && promo.diasDeLaSemana.length > 0 && !promo.diasDeLaSemana.includes(today)) isValid = false;

            if (isValid) {
                activePromos.push(`- ${promo.nombre}: ${promo.descripcion}`);
            }
        });

        if (activePromos.length > 0) {
            knowledgeBase += "¬°Promociones Activas HOY!:\n";
            knowledgeBase += activePromos.join('\n') + "\n\n";
        }
    }

    // 4. Obtener Preguntas Frecuentes (CORRECCI√ìN: Se llama desde la ra√≠z)
    const faqsSnap = await db.collection('preguntasFrecuentes').get();
    if (!faqsSnap.empty) {
        knowledgeBase += "Preguntas Frecuentes Comunes:\n";
        faqsSnap.forEach(doc => {
            const faq = doc.data();
            knowledgeBase += `- P: ${faq.pregunta}\n  R: ${faq.respuesta}\n`;
        });
    }

    return knowledgeBase;
}


async function handleSalesConversation(chatHistory) {
    try {
        const knowledgeBase = await buildKnowledgeBase();

        if (!knowledgeBase) {
            console.error(chalk.red('‚ùå La base de conocimiento est√° vac√≠a. Revisa la estructura en Firestore.'));
            return "Lo siento, no tengo informaci√≥n disponible en este momento. Un asesor se pondr√° en contacto contigo.";
        }

        const systemPrompt = `Eres I-Bot, el asistente de ventas virtual de UltraWIFI en San Rafael, Mendoza. Tu personalidad es la de un vecino experto en tecnolog√≠a: amigable, servicial y usas un lenguaje coloquial argentino (tuteo). Tu misi√≥n es entender las necesidades del cliente, explicarle por qu√© nuestro servicio es la mejor opci√≥n y guiarlo para verificar si tenemos cobertura.

        **Base de Conocimiento (√öNICA fuente de verdad):**
        ---
        ${knowledgeBase}
        ---

        **Reglas de Conversaci√≥n (INQUEBRANTABLES):**
        1.  **S√© Proactivo con las Promos:** Si hay una secci√≥n de "Promociones Activas", ¬°menci√≥nala! Es tu mejor herramienta de venta. Por ejemplo, si preguntan por el costo de instalaci√≥n, responde el precio est√°ndar y a√±ade la promoci√≥n si existe.
        2.  **Gu√≠a hacia la Cobertura:** Tu objetivo principal es que el cliente te d√© su direcci√≥n para verificar la cobertura. Despu√©s de responder cualquier pregunta, intenta llevar la conversaci√≥n a ese punto.
        3.  **No Inventes:** Si no sabes algo, der√≠valo a un humano diciendo: "Esa es una muy buena pregunta. Para darte el dato exacto, prefiero que te contacte uno de los chicos del equipo comercial. ¬øTe parece bien si le paso tu n√∫mero?".
        4.  **Tono y Personalidad:** Usa emojis (üëã, üòä, ‚úÖ, üöÄ, ü§î, üìç) y un tono cercano.`;
        
        const chat = model.startChat({
            history: [
                { role: 'user', parts: [{ text: systemPrompt }] },
                { role: 'model', parts: [{ text: "¬°Entendido! Estoy listo para asistir al cliente como un vendedor experto de UltraWIFI." }] },
                ...chatHistory.slice(0, -1)
            ]
        });

        const lastUserMessage = chatHistory[chatHistory.length - 1].parts[0].text;
        const result = await chat.sendMessage(lastUserMessage);
        const response = await result.response;
        return response.text().trim();

    } catch (error) {
        console.error(chalk.red('‚ùå Error en handleSalesConversation con Gemini:'), error);
        return "Lo siento, tuve un problema procesando tu consulta. Un asesor humano la revisar√° a la brevedad.";
    }
}

async function analizarSentimiento(userMessage) {
    const prompt = `Analiza el sentimiento del siguiente mensaje de un cliente a su proveedor de internet. Responde √∫nicamente con una de estas cuatro palabras: "enojado", "frustrado", "neutro", "contento". Mensaje: "${userMessage}"`;
    try {
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text().trim().toLowerCase();
        if (['enojado', 'frustrado', 'contento'].includes(text)) {
            return text;
        }
        return 'neutro';
    } catch (error) {
        console.error(chalk.red('‚ùå Error al analizar sentimiento con Gemini:'), error);
        return 'neutro';
    }
}

module.exports = {
    handleSalesConversation,
    analizarSentimiento,
};
